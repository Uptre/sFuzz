#include <iostream>

#include "gtest/gtest.h"
#include <libfuzzer/ContractABI.h>

using namespace fuzzer;

TEST(ContractABI, encode2DArray)
{
  DataType dt1(fromHex("0x01"), true, false);
  DataType dt2(fromHex("0x02"), true, false);
  DataType dt3(fromHex("0x03"), true, false);
  vector<DataType> dts1 = {dt1, dt2};
  vector<DataType> dts2 = {dt3};
  vector<vector<DataType>> dtss = {dts1, dts2};
  ContractABI ca;
  bytes ret = ca.encode2DArray(dtss, true, true);
  EXPECT_EQ(ret, fromHex("000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000003"));
}

TEST(ContractABI, encodeArrayDynamic)
{
  DataType dt1(fromHex("0xffffff"), false, true);
  DataType dt2(fromHex("0xaaaaaa"), false, true);
  DataType dt3(fromHex("0xdddddddddd"), false, true);
  vector<DataType> dts = { dt1, dt2, dt3};
  ContractABI ca;
  bytes ret = ca.encodeArray(dts, true);
  EXPECT_EQ(ret, fromHex("000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000003ffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003aaaaaa00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005dddddddddd000000000000000000000000000000000000000000000000000000"));
}

TEST(ContractABI, encodeArrayStatic)
{
  DataType dt1(fromHex("0xffff"), false, true);
  DataType dt2(fromHex("0xaaaa"), false, true);
  vector<DataType> dts = { dt1, dt2 };
  ContractABI ca;
  bytes ret = ca.encodeArray(dts, false);
  EXPECT_EQ(ret, fromHex("0000000000000000000000000000000000000000000000000000000000000002ffff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002aaaa000000000000000000000000000000000000000000000000000000000000"));
}

TEST(ContractABI, encodeSingle)
{
  bytes value = fromHex("0xffff");
  DataType l(value, true /* pad left*/, true /* isDynamic */);
  DataType r(value, false, false);
  EXPECT_EQ(l.header(), fromHex("0000000000000000000000000000000000000000000000000000000000000002"));
  EXPECT_EQ(r.header(), fromHex("0000000000000000000000000000000000000000000000000000000000000002"));
  EXPECT_EQ(l.payload(), fromHex("000000000000000000000000000000000000000000000000000000000000ffff"));
  EXPECT_EQ(r.payload(), fromHex("ffff000000000000000000000000000000000000000000000000000000000000"));
  ContractABI ca;
  EXPECT_EQ(ca.encodeSingle(l), fromHex("0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000ffff"));
  EXPECT_EQ(ca.encodeSingle(r), fromHex("ffff000000000000000000000000000000000000000000000000000000000000"));
  bytes longValue = bytes(33, 0);
  DataType ll(longValue, false, true);
  EXPECT_EQ(ll.payload().size(), 64);
  EXPECT_EQ(ca.encodeSingle(ll).size(), 96);
}
