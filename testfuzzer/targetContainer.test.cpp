#include <iostream>

#include "gtest/gtest.h"
#include <libfuzzer/TargetContainer.h>
#include <libfuzzer/ContractABI.h>

using namespace fuzzer;
using namespace std;
TEST(TargetContainer, 2_address)
{
  bytes code = fromHex("608060405234801561001057600080fd5b5061032f806100206000396000f300608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680639bccfedb14610046575b600080fd5b34801561005257600080fd5b5061006d600480360361006891908101906101e3565b610083565b60405161007a9190610233565b60405180910390f35b600081600081518110151561009457fe5b9060200190602002015160008151811015156100ac57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff16319050919050565b60006100e082356102d5565b905092915050565b600082601f83011215156100fb57600080fd5b813561010e6101098261027b565b61024e565b9150818183526020840193506020810190508385602084028201111561013357600080fd5b60005b83811015610163578161014988826100d4565b845260208401935060208301925050600181019050610136565b5050505092915050565b600082601f830112151561018057600080fd5b813561019361018e826102a3565b61024e565b9150818183526020840193506020810190508360005b838110156101d957813586016101bf88826100e8565b8452602084019350602083019250506001810190506101a9565b5050505092915050565b6000602082840312156101f557600080fd5b600082013567ffffffffffffffff81111561020f57600080fd5b61021b8482850161016d565b91505092915050565b61022d816102cb565b82525050565b60006020820190506102486000830184610224565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561027157600080fd5b8060405250919050565b600067ffffffffffffffff82111561029257600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156102ba57600080fd5b602082029050602081019050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff821690509190505600a265627a7a723058204079560aafe42aa98f5a15c2aeace8542d76a917f8af2b579c70d113560ce6f26c6578706572696d656e74616cf50037");
  string json = "[{\"constant\":false,\"inputs\":[{\"name\":\"v\",\"type\":\"address[][]\"}],\"name\":\"add\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]";
  ContractABI ca(json);
  TargetContainer t(code, ca);
  bytes data = ca.randomTestcase();
  data[32 + 32 * 5 * 5 - 20 - 1] = 100;
  t.exec(data);
}

TEST(TargetContainer, DISABLED_1_address) {
  bytes code = fromHex("608060405234801561001057600080fd5b50610279806100206000396000f300608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063c4c1c94f14610046575b600080fd5b34801561005257600080fd5b5061006d60048036036100689190810190610155565b610083565b60405161007a91906101a5565b60405180910390f35b600081600081518110151561009457fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff16319050919050565b60006100c8823561021f565b905092915050565b600082601f83011215156100e357600080fd5b81356100f66100f1826101ed565b6101c0565b9150818183526020840193506020810190508385602084028201111561011b57600080fd5b60005b8381101561014b578161013188826100bc565b84526020840193506020830192505060018101905061011e565b5050505092915050565b60006020828403121561016757600080fd5b600082013567ffffffffffffffff81111561018157600080fd5b61018d848285016100d0565b91505092915050565b61019f81610215565b82525050565b60006020820190506101ba6000830184610196565b92915050565b6000604051905081810181811067ffffffffffffffff821117156101e357600080fd5b8060405250919050565b600067ffffffffffffffff82111561020457600080fd5b602082029050602081019050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff821690509190505600a265627a7a7230582018da20d2c50eae0ba0c5564dca10cb88c960cf341f8343675a0c81a8ef4f46fb6c6578706572696d656e74616cf50037");
  string json = "[{\"constant\":false,\"inputs\":[{\"name\":\"v\",\"type\":\"address[]\"}],\"name\":\"add\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]";
  ContractABI ca(json);
  TargetContainer t(code, ca);
  bytes data = ca.randomTestcase();
  data[32 + 32 * 5 - 20 - 1] = 100;
  t.exec(data);
}

TEST(TargetContainer, DISABLED_0_address)
{
  bytes code = fromHex("608060405234801561001057600080fd5b5060e58061001f6000396000f300608060405260043610603f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630a3b0a4f146044575b600080fd5b348015604f57600080fd5b506082600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506098565b6040518082815260200191505060405180910390f35b60008173ffffffffffffffffffffffffffffffffffffffff163190509190505600a165627a7a723058203e6a4460eb86a4037d170ae550013eae58a904e86f3d927297a67e81d33341b50029");
  string json = "[{\"constant\":false,\"inputs\":[{\"name\":\"x\",\"type\":\"address\"}],\"name\":\"add\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]";
  ContractABI ca(json);
  TargetContainer t(code, ca);
  bytes data = ca.randomTestcase();
  data[32 + 8] = 1;
  t.exec(data);
}
TEST(TargetContainer, DISABLED_exec)
{
  bytes code = fromHex("60806040526000805534801561001457600080fd5b5060405160208061011583398101806040528101908080519060200190929190505050806000819055505060c88061004d6000396000f300608060405260043610603f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063a5f3c23b146044575b600080fd5b348015604f57600080fd5b5060766004803603810190808035906020019092919080359060200190929190505050608c565b6040518082815260200191505060405180910390f35b60008054828401019050929150505600a165627a7a723058203d93221ed677738fe25d32fee10274c53e90ffa7d72db614c33c14b18a83ebc20029");
  string json = "[{\"constant\":false,\"inputs\":[{\"name\":\"a\",\"type\":\"int256\"},{\"name\":\"b\",\"type\":\"int256\"}],\"name\":\"add\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"init\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]";
  ContractABI ca(json);
  TargetContainer t(code, ca);
  Timer time;
  bytes data(96, 0);
  data[31] = 100;
  data[63] = 100;
  data[95] = 20;
  t.exec(data);
  cout << "EXEC: " << time.elapsed() << endl;
}

